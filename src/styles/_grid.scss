@use "sass:math";
@use "./breakpoints.scss" as *;

// ============================================================================
// SCSS LOOPS SHOWCASE - GRID SYSTEM
// ============================================================================
// This file demonstrates SCSS @for loops combined with breakpoint mixins
//
// KEY CONCEPTS:
// 1. @for loops generate repetitive classes (col-1 through col-12)
// 2. Breakpoint mixins with @content wrap loops in media queries
// 3. Result: 60 column classes from ~30 lines of SCSS
//
// The Magic:
// - Change $grid-columns once → all 60 classes update automatically
// - Add a breakpoint once → 12 new column classes generated instantly
//
// Structure:
// @include md {              ← Breakpoint mixin wraps everything
//   @for $i from 1 to 12 {   ← Loop generates 12 column classes
//     .col-#{$i}-md { ... }
//   }
// }
// ============================================================================

$grid-columns: 12; // Change this to 16 → instantly get col-1 through col-16!

// map
$grid-gaps: (
  "0": 0,
  "1": 0.25rem,
  "2": 0.5rem,
  "3": 1rem,
);

// list
$layout-values: flex-start, center, flex-end, space-between, space-around,
  space-evenly;

// base layout classes
.container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 1.5rem;
  box-sizing: border-box;
}

.row {
  display: flex;
  flex-flow: row wrap;
}

// grid gaps. Loop through a map
@each $key, $value in $grid-gaps {
  .gap-#{$key} > * {
    padding: $value;
  }

  .gap-#{$key} {
    margin-left: -$value;
    margin-right: -$value;
  }
}

// justify content classes. Loop through a list
@each $value in $layout-values {
  .justify-#{$value} {
    justify-content: $value;
  }
}

// =======================================================================
// COLUMN GENERATION USING @for LOOPS
// =======================================================================
// Each @for loop runs inside a breakpoint mixin, generating 12 column classes
// Total output: 12 columns × 5 breakpoints = 60 CSS classes
// =======================================================================

// Extra Small - Mobile first (0px and up)
@include xs {
  // Loop generates: .col-1-xs, .col-2-xs, ... .col-12-xs
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xs {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

// Small - Large phones (480px and up)
@include sm {
  // Loop generates: .col-1-sm, .col-2-sm, ... .col-12-sm
  @for $i from 1 through $grid-columns {
    .col-#{$i}-sm {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

// Medium - Tablets (720px and up)
@include md {
  // Loop generates: .col-1-md, .col-2-md, ... .col-12-md
  @for $i from 1 through $grid-columns {
    .col-#{$i}-md {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

// Large - Desktops (960px and up)
@include lg {
  // Loop generates: .col-1-lg, .col-2-lg, ... .col-12-lg
  @for $i from 1 through $grid-columns {
    .col-#{$i}-lg {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}

// Extra Large - Large desktops (1200px and up)
@include xl {
  // Loop generates: .col-1-xl, .col-2-xl, ... .col-12-xl
  @for $i from 1 through $grid-columns {
    .col-#{$i}-xl {
      box-sizing: border-box;
      flex-grow: 0;
      width: math.div($i * 100%, $grid-columns);
    }
  }
}
